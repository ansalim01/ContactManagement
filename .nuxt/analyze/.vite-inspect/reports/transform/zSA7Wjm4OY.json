{
  "resolvedId": "C:/web/petProject/ContactManagement1/pages/index.vue?macro=true",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<script setup lang=\"ts\">\r\nimport { ref, onMounted, computed } from 'vue';\r\nimport ContactList from '@/components/ContactList.vue';\r\nimport SearchBar from '@/components/SearchBar.vue';\r\nimport ContactForm from '@/components/ContactForm.vue';\r\nimport AppModal from '@/components/AppModal.vue';\r\nimport type { InterfaceContactItems, InterfaceContactItem } from '@/types';\r\nimport { ModalType } from '@/types';\r\nimport { fetchContacts } from '@/api';\r\n\r\n// Реактивное состояние для заголовков контактов\r\nconst contactTitle = ref<string[]>(['key', 'name', 'telefon', 'email']);\r\n\r\n// Реактивное состояние для формы редактирования контакта\r\nconst formaContact = ref<InterfaceContactItem>({\r\n  key: '',\r\n  name: '',\r\n  telefon: '',\r\n  email: ''\r\n});\r\n\r\n// Реактивное состояние для видимости модального окна и типа модального окна\r\nconst showModal = ref<boolean>(false);\r\nconst typeModal = ref<ModalType>(ModalType.Add);\r\n\r\n// Реактивное состояние для поискового запроса\r\nconst searchQuery = ref<string>('');\r\n\r\n// Реактивное состояние для ошибок валидации\r\nconst validationErrors = ref<{ [key: string]: string }>({});\r\n\r\n// Функция для загрузки данных из localStorage\r\nfunction loadContactsFromLocalStorage (): InterfaceContactItems {\r\n  if (process.client) {\r\n    const savedContacts = localStorage.getItem('contacts');\r\n    if (savedContacts) {\r\n      return JSON.parse(savedContacts);\r\n    }\r\n  }\r\n  return [];\r\n}\r\n\r\n// Функция для загрузки данных из API, если localStorage пустой\r\nasync function loadContactsFromAPI (): Promise<InterfaceContactItems> {\r\n  try {\r\n    const contacts = await fetchContacts();\r\n    return contacts;\r\n  } catch (error) {\r\n    console.error('Failed to fetch contacts:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Дебаунс функция\r\nfunction debounce<T extends (...args: any[]) => void>(func: T, delay: number): T {\r\n  let timeoutId: ReturnType<typeof setTimeout> | null = null;\r\n  return function (this: any, ...args: Parameters<T>) {\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n    timeoutId = setTimeout(() => func.apply(this, args), delay);\r\n  } as T;\r\n}\r\n\r\n// Реактивное состояние списка контактов\r\nconst contactList = ref<InterfaceContactItems>([]);\r\n\r\n// Загрузка данных из localStorage при монтировании компонента\r\nonMounted(async () => {\r\n  const savedContacts = loadContactsFromLocalStorage();\r\n  if (savedContacts.length > 0) {\r\n    contactList.value = savedContacts;\r\n  } else {\r\n    try {\r\n      const contactsFromAPI = await loadContactsFromAPI();\r\n      contactList.value = contactsFromAPI;\r\n      saveContactsToLocalStorage(contactsFromAPI);\r\n    } catch (error) {\r\n      console.error('Failed to fetch contacts:', error);\r\n    }\r\n  }\r\n});\r\n\r\n// Функция сохранения контактов в localStorage\r\nfunction saveContactsToLocalStorage (contacts: InterfaceContactItems) {\r\n  if (process.client) {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }\r\n}\r\n\r\n// Обработчик изменения поискового запроса с дебаунсом\r\nconst handleSearch = debounce((value: string) => {\r\n  searchQuery.value = value.toLowerCase();\r\n}, 300);\r\n\r\n// Вычисляемое свойство для фильтрации контактов на основе searchQuery\r\nconst filteredContacts = computed(() =>\r\n  contactList.value.filter(contact =>\r\n    contact.name.toLowerCase().includes(searchQuery.value.toLowerCase())\r\n  )\r\n);\r\n\r\n// Функция для начала редактирования контакта\r\nfunction editingContact (contact: InterfaceContactItem) {\r\n  typeModal.value = ModalType.Edit;\r\n  showModal.value = true;\r\n  formaContact.value = { ...contact };\r\n  validationErrors.value = {};\r\n}\r\n\r\n// Валидация полей формы\r\nfunction validateForm (contact: InterfaceContactItem): boolean {\r\n  const errors: { [key: string]: string } = {};\r\n\r\n  if (!contact.name) {\r\n    errors.name = 'Name is required';\r\n  }\r\n  if (!contact.telefon) {\r\n    errors.telefon = 'Telefon is required';\r\n  }\r\n  if (!contact.email) {\r\n    errors.email = 'Email is required';\r\n  } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(contact.email)) {\r\n    errors.email = 'Invalid email format';\r\n  }\r\n\r\n  validationErrors.value = errors;\r\n  return Object.keys(errors).length === 0;\r\n}\r\n\r\n// Функция для сохранения изменений или добавления нового контакта\r\nfunction saveContactChanges (updatedContact: InterfaceContactItem) {\r\n  if (!validateForm(updatedContact)) {\r\n    return;\r\n  }\r\n\r\n  if (typeModal.value === ModalType.Add) {\r\n    const newKey = String(Date.now());\r\n    updatedContact.key = newKey;\r\n    contactList.value.push(updatedContact);\r\n  } else if (typeModal.value === ModalType.Edit) {\r\n    const index = contactList.value.findIndex(c => c.key === updatedContact.key);\r\n    if (index !== -1) {\r\n      contactList.value[index] = updatedContact;\r\n    }\r\n  }\r\n\r\n  saveContactsToLocalStorage(contactList.value);\r\n  showModal.value = false;\r\n}\r\n\r\n// Функция для удаления контакта\r\nfunction deleteContact (item: InterfaceContactItem) {\r\n  const index = contactList.value.findIndex(c => c.key === item.key);\r\n  if (index !== -1) {\r\n    // contactList.value.splice(index, 1);\r\n    contactList.value = contactList.value.filter(p => p.key !== item.key);\r\n    saveContactsToLocalStorage(contactList.value);\r\n  }\r\n}\r\n\r\n// Функция для добавления нового контакта\r\nfunction addContact () {\r\n  typeModal.value = ModalType.Add;\r\n  formaContact.value = {\r\n    key: '',\r\n    name: '',\r\n    telefon: '',\r\n    email: ''\r\n  };\r\n  validationErrors.value = {};\r\n  showModal.value = true;\r\n}\r\n\r\n// Функция для закрытия модального окна\r\nfunction closeModal () {\r\n  showModal.value = false;\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"contact\">\r\n    <div class=\"contact__container\">\r\n      <AppIcon\r\n        name=\"user-add\"\r\n        :width=\"32\"\r\n        :height=\"32\"\r\n        color=\"teal\"\r\n        @click=\"addContact\"\r\n      />\r\n      <SearchBar\r\n        placeholder=\"Поиск по имени\"\r\n        @input=\"handleSearch\"\r\n      />\r\n      <ContactList\r\n        :contacts=\"filteredContacts\"\r\n        :contactTitle=\"contactTitle\"\r\n        @editContact=\"editingContact\"\r\n        @deleteContact=\"deleteContact\"\r\n        :searchQuery=\"searchQuery\"\r\n      />\r\n    </div>\r\n    <AppModal :isVisible=\"showModal\" @close=\"closeModal\">\r\n      <ContactForm\r\n        :formaContact=\"formaContact\"\r\n        :validationErrors=\"validationErrors\"\r\n        :typeModal=\"typeModal\"\r\n        @saveContactChanges=\"saveContactChanges\"\r\n      />\r\n    </AppModal>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\">\r\n\r\n.contact {\r\n  &__container {\r\n    max-width: 1900px;\r\n    margin: 0 auto;\r\n    min-height: 100vh;\r\n    padding: 12px 16px;\r\n    overflow: auto;\r\n  }\r\n}\r\n</style>\r\n",
      "start": 1720823556476,
      "end": 1720823556662,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1720823556662,
      "end": 1720823556662,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1720823556662,
      "end": 1720823556662,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1720823556662,
      "end": 1720823556662,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1720823556662,
      "end": 1720823556662,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1720823556662,
      "end": 1720823556662,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1720823556662,
      "end": 1720823556662,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720823556662,
      "end": 1720823556662,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "import _sfc_main from \"C:/web/petProject/ContactManagement1/pages/index.vue?vue&type=script&setup=true&lang.ts\";\nexport * from \"C:/web/petProject/ContactManagement1/pages/index.vue?vue&type=script&setup=true&lang.ts\";\nimport \"C:/web/petProject/ContactManagement1/pages/index.vue?vue&type=style&index=0&lang.scss\";\nexport default _sfc_main;\n",
      "start": 1720823556662,
      "end": 1720823556852,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1720823556852,
      "end": 1720823556852,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720823556852,
      "end": 1720823556852,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1720823556852,
      "end": 1720823556853,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1720823556853,
      "end": 1720823556853,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1720823556853,
      "end": 1720823556870,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720823556870,
      "end": 1720823556870,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1720823556870,
      "end": 1720823556870,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720823556870,
      "end": 1720823556871,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720823556871,
      "end": 1720823556871,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1720823556871,
      "end": 1720823556871,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720823556871,
      "end": 1720823556871,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720823556871,
      "end": 1720823556871,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1720823556871,
      "end": 1720823556871,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720823556871,
      "end": 1720823556871,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720823556871,
      "end": 1720823556872,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1720823556872,
      "end": 1720823556872,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1720823556872,
      "end": 1720823556872,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1720823556872,
      "end": 1720823556872,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "result": "export { default } from \"C:/web/petProject/ContactManagement1/pages/index.vue?macro=true&vue&type=script&setup=true&lang.ts\"",
      "start": 1720823556872,
      "end": 1720823556873,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "AAAA"
      }
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1720823556873,
      "end": 1720823556873,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1720823556873,
      "end": 1720823556873,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1720823556873,
      "end": 1720823556873,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1720823556874,
      "end": 1720823556874,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1720823556874,
      "end": 1720823556874,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1720823556874,
      "end": 1720823556874,
      "order": "normal"
    }
  ]
}
